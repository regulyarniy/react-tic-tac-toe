{"version":3,"sources":["board.js","game.js","index.js"],"names":["Square","props","onClick","value","win","react_default","a","createElement","type","className","concat","Row","squares","Board","i","row","col","_this$props","this","isWin","includes","board_Square","key","slice","rows","j","push","renderSquare","length","renderRow","board_Row","React","Component","calculateWinner","lines","_lines$i","Object","slicedToArray","b","c","Game","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","xIsNext","stepNumber","sorting","step","setState","_this$state","newHistory","nextSorting","_this2","_this$state2","current","winner","status","newSquares","map","square","index","some","indexOfWinner","moves","moveState","moveIndex","desc","moveClass","join","jumpTo","reverse","board_Board","handleClick","changeSorting","ReactDOM","render","game_Game","document","getElementById"],"mappings":"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","file":"static/js/main.b98bbc72.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Square = (props) => {\n  const { onClick, value, win } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`square ${win ? `square--win` : ``}`}\n      onClick={onClick}\n    >\n      {value}\n    </button>\n  );\n};\n\nSquare.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  win: PropTypes.bool.isRequired,\n};\n\nconst Row = (props) => {\n  const { squares } = props;\n  return (\n    <div\n      className=\"board-row\"\n    >\n      {squares}\n    </div>\n  );\n};\n\nRow.propTypes = {\n  squares: PropTypes.arrayOf(React.Component).isRequired,\n};\n\nexport default class Board extends React.Component {\n  renderSquare(i, row, col) {\n    const { squares, onClick } = this.props;\n    const isWin = squares[i].includes(`W`);\n    return (\n      <Square\n        key={i}\n        win={isWin}\n        value={squares[i].slice(0, 1)}\n        onClick={() => onClick(i, row, col)}\n      />\n    );\n  }\n\n  static renderRow(i, squares) {\n    return (\n      <Row\n        key={i}\n        squares={squares}\n      />\n    );\n  }\n\n  render() {\n    const ROW_COUNT = 3;\n    const COLUMN_COUNT = 3;\n    const rows = [];\n    for (let i = 0; i < ROW_COUNT; i += 1) {\n      const squares = [];\n      for (let j = i * ROW_COUNT; j < i * ROW_COUNT + COLUMN_COUNT; j += 1) {\n        squares.push(this.renderSquare(j, i + 1, squares.length + 1));\n      }\n      rows.push(Board.renderRow(i, squares));\n    }\n    return (\n      <div>\n        {rows}\n      </div>\n    );\n  }\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport Board from './board';\n\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return lines[i];\n    }\n  }\n  return null;\n};\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(``),\n      }],\n      xIsNext: true,\n      stepNumber: 0,\n      sorting: `asc`,\n    };\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  handleClick(i, row, col) {\n    const { history, stepNumber, xIsNext } = this.state;\n    const newHistory = history.slice(0, stepNumber + 1);\n    const current = newHistory[stepNumber];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = xIsNext ? `X` : `O`;\n    this.setState({\n      history: newHistory.concat([{ squares, row, col }]),\n      stepNumber: newHistory.length,\n      xIsNext: !xIsNext,\n    });\n  }\n\n  changeSorting() {\n    const { sorting } = this.state;\n    const nextSorting = (sorting === `asc`)\n      ? `desc`\n      : `asc`;\n    this.setState({\n      sorting: nextSorting,\n    });\n  }\n\n  render() {\n    const {\n      history,\n      stepNumber,\n      xIsNext,\n      sorting,\n    } = this.state;\n    const current = history[stepNumber];\n    const winner = calculateWinner(current.squares);\n    const status = winner\n      ? `Winner: ${current.squares[winner[0]]} `\n      : `${stepNumber === 9 ? `Draw` : `Next player: ${xIsNext ? `X` : `O`}`} `;\n    const newSquares = winner\n      ? current.squares.map((square, index) => (winner.some(indexOfWinner => index === indexOfWinner) ? `${square}W` : square))\n      : current.squares;\n    const moves = history.map((moveState, moveIndex) => {\n      const desc = moveIndex\n        ? `Go to move #${moveIndex} (col:${moveState.col},row:${moveState.row})`\n        : `Go to game start`;\n      const isCurrent = moveIndex === stepNumber;\n      const moveClass = isCurrent ? `current` : ``;\n      return (\n        <li className={moveClass} key={moveState.squares.join(``)}>\n          <button type=\"button\" onClick={() => this.jumpTo(moveIndex)}>{desc}</button>\n        </li>\n      );\n    });\n    if (sorting === `desc`) {\n      moves.reverse();\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={newSquares}\n            onClick={(i, row, col) => this.handleClick(i, row, col)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>\n            {status}\n            <button type=\"button\" onClick={() => this.changeSorting()}>\n              Order:\n              {sorting}\n            </button>\n          </div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './game';\nimport './index.css';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById(`root`),\n);\n"],"sourceRoot":""}